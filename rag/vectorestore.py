# rag/vectorestore.py
from __future__ import annotations

import shutil
import sqlite3
import tempfile
from pathlib import Path
from typing import List

from langchain_openai import OpenAIEmbeddings
from langchain_chroma import Chroma
from langchain.docstore.document import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter

from .config import OPENAI_API_KEY

DB_PATH = Path("data.db")
BASE_DIR = Path("vectorstore")          # ¬´–∞–∫—Ç—É–∞–ª—å–Ω—ã–π¬ª –∏–Ω–¥–µ–∫—Å –∂–∏–≤—ë—Ç –∑–¥–µ—Å—å


def _load_docs() -> List[Document]:
    conn = sqlite3.connect(DB_PATH)
    rows = conn.execute("SELECT source, content FROM site_data").fetchall()
    conn.close()

    splitter = RecursiveCharacterTextSplitter(
        chunk_size=1_000, chunk_overlap=100,
        separators=["\n\n", "\n", ".", "!", "?"],
    )
    docs = []
    for source, content in rows:
        for chunk in splitter.split_text(content):
            docs.append(Document(page_content=chunk, metadata={"source": source}))
    return docs


def _build_index(dir_: Path) -> Chroma:
    docs = _load_docs()
    print(f"üìÑ  –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å –≤ {dir_}. –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs)}")

    embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
    return Chroma.from_documents(
        documents=docs,
        embedding=embeddings,
        collection_name="rag_collection",
        persist_directory=str(dir_),
    )


def create_fresh_vectorstore() -> Chroma:
    """
    1. –°–æ–∑–¥–∞—ë—Ç –∏–Ω–¥–µ–∫—Å –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ.
    2. –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π BASE_DIR (–µ—Å–ª–∏ –±—ã–ª) –∏ ¬´–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç¬ª –Ω–æ–≤—ã–π.
    3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Chroma, —É–∂–µ —á–∏—Ç–∞—é—â–∏–π –∏–∑ BASE_DIR.
    """
    tmp_dir = Path(tempfile.mkdtemp(prefix="vs_tmp_"))
    vs_tmp = _build_index(tmp_dir)      # —Å—Ç—Ä–æ–∏–º ¬´–ø–µ—Å–æ—á–Ω–∏—Ü—É¬ª

    # ‚Äî‚Äî> –∞—Ç–æ–º–∞—Ä–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
    if BASE_DIR.exists():
        shutil.rmtree(BASE_DIR)
    tmp_dir.rename(BASE_DIR)

    # –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ¬´–Ω–æ–≤–æ–º—É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É¬ª –∫–∞—Ç–∞–ª–æ–≥—É
    print("‚úÖ  –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω")
    embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
    return Chroma(
        collection_name="rag_collection",
        persist_directory=str(BASE_DIR),
        embedding_function=embeddings,
    )